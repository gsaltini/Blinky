
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001974  08001974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001990  08001990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001998  08001998  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001998  08001998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080019ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080019ac  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002fdb  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ec5  00000000  00000000  00023053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f8  00000000  00000000  00023f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002d9  00000000  00000000  00024310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013bc2  00000000  00000000  000245e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000049b9  00000000  00000000  000381ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b29a  00000000  00000000  0003cb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e50  00000000  00000000  000b7e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b8c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800195c 	.word	0x0800195c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800195c 	.word	0x0800195c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 f955 	bl	800072e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f828 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f86e 	bl	8000568 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Blinking LED lights
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	4806      	ldr	r0, [pc, #24]	; (80004a8 <main+0x2c>)
 8000490:	f000 fc84 	bl	8000d9c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000498:	f000 f9b8 	bl	800080c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800049c:	2140      	movs	r1, #64	; 0x40
 800049e:	4802      	ldr	r0, [pc, #8]	; (80004a8 <main+0x2c>)
 80004a0:	f000 fc7c 	bl	8000d9c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004a4:	e7f2      	b.n	800048c <main+0x10>
 80004a6:	bf00      	nop
 80004a8:	40020400 	.word	0x40020400

080004ac <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}
// Button Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t PIN)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	80fb      	strh	r3, [r7, #6]
	if (PIN == GPIO_PIN_0) {
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d107      	bne.n	80004cc <HAL_GPIO_EXTI_Callback+0x20>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80004c0:	f000 fc6c 	bl	8000d9c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	4803      	ldr	r0, [pc, #12]	; (80004d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80004c8:	f000 fc68 	bl	8000d9c <HAL_GPIO_TogglePin>
	}
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40020400 	.word	0x40020400

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b092      	sub	sp, #72	; 0x48
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2234      	movs	r2, #52	; 0x34
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fa0c 	bl	8001904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <SystemClock_Config+0x8c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <SystemClock_Config+0x8c>)
 8000504:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000508:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800050a:	2310      	movs	r3, #16
 800050c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000516:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051c:	2300      	movs	r3, #0
 800051e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4618      	mov	r0, r3
 8000526:	f000 fc6b 	bl	8000e00 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000530:	f000 f870 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	230f      	movs	r3, #15
 8000536:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f000 ff87 	bl	8001460 <HAL_RCC_ClockConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000558:	f000 f85c 	bl	8000614 <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3748      	adds	r7, #72	; 0x48
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40007000 	.word	0x40007000

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_GPIO_Init+0xa0>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <MX_GPIO_Init+0xa0>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_GPIO_Init+0xa0>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_GPIO_Init+0xa0>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_GPIO_Init+0xa0>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_GPIO_Init+0xa0>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LEF_GREEN_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	21c0      	movs	r1, #192	; 0xc0
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <MX_GPIO_Init+0xa4>)
 80005b4:	f000 fbda 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <MX_GPIO_Init+0xa8>)
 80005ce:	f000 fa4d 	bl	8000a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LEF_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LEF_GREEN_Pin;
 80005d2:	23c0      	movs	r3, #192	; 0xc0
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <MX_GPIO_Init+0xa4>)
 80005ea:	f000 fa3f 	bl	8000a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2006      	movs	r0, #6
 80005f4:	f000 fa03 	bl	80009fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 fa1c 	bl	8000a36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020400 	.word	0x40020400
 8000610:	40020000 	.word	0x40020000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_MspInit+0x58>)
 8000628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <HAL_MspInit+0x58>)
 800062c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000630:	6253      	str	r3, [r2, #36]	; 0x24
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_MspInit+0x58>)
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_MspInit+0x58>)
 8000640:	6a1b      	ldr	r3, [r3, #32]
 8000642:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <HAL_MspInit+0x58>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6213      	str	r3, [r2, #32]
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <HAL_MspInit+0x58>)
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_MspInit+0x58>)
 8000658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_MspInit+0x58>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6253      	str	r3, [r2, #36]	; 0x24
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_MspInit+0x58>)
 8000664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c2:	f000 f887 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 fb7e 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e4:	f7ff fff8 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ea:	490c      	ldr	r1, [pc, #48]	; (800071c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000700:	4c09      	ldr	r4, [pc, #36]	; (8000728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f001 f901 	bl	8001914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff feb3 	bl	800047c <main>
  bx lr
 8000716:	4770      	bx	lr
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	080019a0 	.word	0x080019a0
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	2000002c 	.word	0x2000002c

0800072c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_IRQHandler>

0800072e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f955 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f80e 	bl	8000760 <HAL_InitTick>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e001      	b.n	8000754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000750:	f7ff ff66 	bl	8000620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000754:	79fb      	ldrb	r3, [r7, #7]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_InitTick+0x68>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d022      	beq.n	80007ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_InitTick+0x6c>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HAL_InitTick+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000780:	fbb1 f3f3 	udiv	r3, r1, r3
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f962 	bl	8000a52 <HAL_SYSTICK_Config>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d10f      	bne.n	80007b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b0f      	cmp	r3, #15
 8000798:	d809      	bhi.n	80007ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079a:	2200      	movs	r2, #0
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a2:	f000 f92c 	bl	80009fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_InitTick+0x70>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e007      	b.n	80007be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e004      	b.n	80007be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e001      	b.n	80007be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x1c>)
 80007e4:	6013      	str	r3, [r2, #0]
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000028 	.word	0x20000028
 80007f4:	20000008 	.word	0x20000008

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000028 	.word	0x20000028

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff fff0 	bl	80007f8 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000824:	d004      	beq.n	8000830 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_Delay+0x40>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4413      	add	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000830:	bf00      	nop
 8000832:	f7ff ffe1 	bl	80007f8 <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	d8f7      	bhi.n	8000832 <HAL_Delay+0x26>
  {
  }
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <__NVIC_EnableIRQ+0x34>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c8:	f7ff ff90 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff2d 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff42 	bl	8000898 <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff90 	bl	8000940 <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5f 	bl	80008ec <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff35 	bl	80008b4 <__NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffa2 	bl	80009a4 <SysTick_Config>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a82:	e154      	b.n	8000d2e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8146 	beq.w	8000d28 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0203 	and.w	r2, r3, #3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80a0 	beq.w	8000d28 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <HAL_GPIO_Init+0x2e0>)
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	4a57      	ldr	r2, [pc, #348]	; (8000d4c <HAL_GPIO_Init+0x2e0>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6213      	str	r3, [r2, #32]
 8000bf4:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <HAL_GPIO_Init+0x2e0>)
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c00:	4a53      	ldr	r2, [pc, #332]	; (8000d50 <HAL_GPIO_Init+0x2e4>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4b      	ldr	r2, [pc, #300]	; (8000d54 <HAL_GPIO_Init+0x2e8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d019      	beq.n	8000c60 <HAL_GPIO_Init+0x1f4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x2ec>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d013      	beq.n	8000c5c <HAL_GPIO_Init+0x1f0>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a49      	ldr	r2, [pc, #292]	; (8000d5c <HAL_GPIO_Init+0x2f0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00d      	beq.n	8000c58 <HAL_GPIO_Init+0x1ec>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <HAL_GPIO_Init+0x2f4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d007      	beq.n	8000c54 <HAL_GPIO_Init+0x1e8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a47      	ldr	r2, [pc, #284]	; (8000d64 <HAL_GPIO_Init+0x2f8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d101      	bne.n	8000c50 <HAL_GPIO_Init+0x1e4>
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	e008      	b.n	8000c62 <HAL_GPIO_Init+0x1f6>
 8000c50:	2305      	movs	r3, #5
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1f6>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1f6>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1f6>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1f6>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2e4>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca4:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_GPIO_Init+0x2fc>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f aea3 	bne.w	8000a84 <HAL_GPIO_Init+0x18>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40010000 	.word	0x40010000
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000d88:	e003      	b.n	8000d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	619a      	str	r2, [r3, #24]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4013      	ands	r3, r2
 8000db4:	041a      	lsls	r2, r3, #16
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	43d9      	mvns	r1, r3
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	400b      	ands	r3, r1
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	619a      	str	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fb5c 	bl	80004ac <HAL_GPIO_EXTI_Callback>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e31d      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e12:	4b94      	ldr	r3, [pc, #592]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e1c:	4b91      	ldr	r3, [pc, #580]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d07b      	beq.n	8000f2a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d006      	beq.n	8000e46 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b0c      	cmp	r3, #12
 8000e3c:	d10f      	bne.n	8000e5e <HAL_RCC_OscConfig+0x5e>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d10b      	bne.n	8000e5e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e46:	4b87      	ldr	r3, [pc, #540]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d06a      	beq.n	8000f28 <HAL_RCC_OscConfig+0x128>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d166      	bne.n	8000f28 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e2f7      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d106      	bne.n	8000e74 <HAL_RCC_OscConfig+0x74>
 8000e66:	4b7f      	ldr	r3, [pc, #508]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7e      	ldr	r2, [pc, #504]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e02d      	b.n	8000ed0 <HAL_RCC_OscConfig+0xd0>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10c      	bne.n	8000e96 <HAL_RCC_OscConfig+0x96>
 8000e7c:	4b79      	ldr	r3, [pc, #484]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a78      	ldr	r2, [pc, #480]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b76      	ldr	r3, [pc, #472]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a75      	ldr	r2, [pc, #468]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e01c      	b.n	8000ed0 <HAL_RCC_OscConfig+0xd0>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0xb8>
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a70      	ldr	r2, [pc, #448]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a6d      	ldr	r2, [pc, #436]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e00b      	b.n	8000ed0 <HAL_RCC_OscConfig+0xd0>
 8000eb8:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a69      	ldr	r2, [pc, #420]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b67      	ldr	r3, [pc, #412]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a66      	ldr	r2, [pc, #408]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d013      	beq.n	8000f00 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fc8e 	bl	80007f8 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fc8a 	bl	80007f8 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e2ad      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0xe0>
 8000efe:	e014      	b.n	8000f2a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc7a 	bl	80007f8 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fc76 	bl	80007f8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e299      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f1a:	4b52      	ldr	r3, [pc, #328]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x108>
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d05a      	beq.n	8000fec <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b0c      	cmp	r3, #12
 8000f40:	d119      	bne.n	8000f76 <HAL_RCC_OscConfig+0x176>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d116      	bne.n	8000f76 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f48:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_RCC_OscConfig+0x160>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d001      	beq.n	8000f60 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e276      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b40      	ldr	r3, [pc, #256]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	493d      	ldr	r1, [pc, #244]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f74:	e03a      	b.n	8000fec <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d020      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_RCC_OscConfig+0x268>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fc38 	bl	80007f8 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc34 	bl	80007f8 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e257      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	492a      	ldr	r1, [pc, #168]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
 8000fbe:	e015      	b.n	8000fec <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_RCC_OscConfig+0x268>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fc17 	bl	80007f8 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff fc13 	bl	80007f8 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e236      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80b8 	beq.w	800116a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d170      	bne.n	80010e2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_RCC_OscConfig+0x218>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e21a      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001024:	429a      	cmp	r2, r3
 8001026:	d921      	bls.n	800106c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fc09 	bl	8001844 <RCC_SetFlashLatencyFromMSIRange>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e208      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4906      	ldr	r1, [pc, #24]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	4901      	ldr	r1, [pc, #4]	; (8001064 <HAL_RCC_OscConfig+0x264>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
 8001062:	e020      	b.n	80010a6 <HAL_RCC_OscConfig+0x2a6>
 8001064:	40023800 	.word	0x40023800
 8001068:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800106c:	4b99      	ldr	r3, [pc, #612]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4996      	ldr	r1, [pc, #600]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107e:	4b95      	ldr	r3, [pc, #596]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	061b      	lsls	r3, r3, #24
 800108c:	4991      	ldr	r1, [pc, #580]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fbd4 	bl	8001844 <RCC_SetFlashLatencyFromMSIRange>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e1d3      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	0b5b      	lsrs	r3, r3, #13
 80010ac:	3301      	adds	r3, #1
 80010ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010b6:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80010b8:	6892      	ldr	r2, [r2, #8]
 80010ba:	0912      	lsrs	r2, r2, #4
 80010bc:	f002 020f 	and.w	r2, r2, #15
 80010c0:	4985      	ldr	r1, [pc, #532]	; (80012d8 <HAL_RCC_OscConfig+0x4d8>)
 80010c2:	5c8a      	ldrb	r2, [r1, r2]
 80010c4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010c6:	4a85      	ldr	r2, [pc, #532]	; (80012dc <HAL_RCC_OscConfig+0x4dc>)
 80010c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010ca:	4b85      	ldr	r3, [pc, #532]	; (80012e0 <HAL_RCC_OscConfig+0x4e0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fb46 	bl	8000760 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d045      	beq.n	800116a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	e1b5      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d029      	beq.n	800113e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010ea:	4b7e      	ldr	r3, [pc, #504]	; (80012e4 <HAL_RCC_OscConfig+0x4e4>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb82 	bl	80007f8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f8:	f7ff fb7e 	bl	80007f8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1a1      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	496c      	ldr	r1, [pc, #432]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	061b      	lsls	r3, r3, #24
 8001136:	4967      	ldr	r1, [pc, #412]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e015      	b.n	800116a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800113e:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <HAL_RCC_OscConfig+0x4e4>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fb58 	bl	80007f8 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800114c:	f7ff fb54 	bl	80007f8 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e177      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d030      	beq.n	80011d8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d016      	beq.n	80011ac <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117e:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <HAL_RCC_OscConfig+0x4e8>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff fb38 	bl	80007f8 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff fb34 	bl	80007f8 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e157      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x38c>
 80011aa:	e015      	b.n	80011d8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ac:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <HAL_RCC_OscConfig+0x4e8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fb21 	bl	80007f8 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ba:	f7ff fb1d 	bl	80007f8 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e140      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011cc:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f0      	bne.n	80011ba <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80b5 	beq.w	8001350 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ea:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6253      	str	r3, [r2, #36]	; 0x24
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x4ec>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x4ec>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a32      	ldr	r2, [pc, #200]	; (80012ec <HAL_RCC_OscConfig+0x4ec>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fae5 	bl	80007f8 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fae1 	bl	80007f8 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e104      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_RCC_OscConfig+0x4ec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x466>
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6353      	str	r3, [r2, #52]	; 0x34
 8001264:	e02d      	b.n	80012c2 <HAL_RCC_OscConfig+0x4c2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x488>
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001278:	6353      	str	r3, [r2, #52]	; 0x34
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001284:	6353      	str	r3, [r2, #52]	; 0x34
 8001286:	e01c      	b.n	80012c2 <HAL_RCC_OscConfig+0x4c2>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0x4aa>
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6353      	str	r3, [r2, #52]	; 0x34
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6353      	str	r3, [r2, #52]	; 0x34
 80012a8:	e00b      	b.n	80012c2 <HAL_RCC_OscConfig+0x4c2>
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80012b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b4:	6353      	str	r3, [r2, #52]	; 0x34
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_RCC_OscConfig+0x4d4>)
 80012bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012c0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d024      	beq.n	8001314 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fa95 	bl	80007f8 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012d0:	e019      	b.n	8001306 <HAL_RCC_OscConfig+0x506>
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	08001980 	.word	0x08001980
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004
 80012e4:	42470020 	.word	0x42470020
 80012e8:	42470680 	.word	0x42470680
 80012ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f0:	f7ff fa82 	bl	80007f8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0a3      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001306:	4b54      	ldr	r3, [pc, #336]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0ee      	beq.n	80012f0 <HAL_RCC_OscConfig+0x4f0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fa70 	bl	80007f8 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800131a:	e00a      	b.n	8001332 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131c:	f7ff fa6c 	bl	80007f8 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f241 3288 	movw	r2, #5000	; 0x1388
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e08d      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ee      	bne.n	800131c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001344:	4b44      	ldr	r3, [pc, #272]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 800134a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800134e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b00      	cmp	r3, #0
 8001356:	d079      	beq.n	800144c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d056      	beq.n	800140c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	2b02      	cmp	r3, #2
 8001364:	d13b      	bne.n	80013de <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x65c>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fa44 	bl	80007f8 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fa40 	bl	80007f8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e063      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	4319      	orrs	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	430b      	orrs	r3, r1
 80013aa:	492b      	ldr	r1, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_RCC_OscConfig+0x65c>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fa1f 	bl	80007f8 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff fa1b 	bl	80007f8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e03e      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x5be>
 80013dc:	e036      	b.n	800144c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_RCC_OscConfig+0x65c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fa08 	bl	80007f8 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fa04 	bl	80007f8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e027      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x5ec>
 800140a:	e01f      	b.n	800144c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e01a      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_RCC_OscConfig+0x658>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	429a      	cmp	r2, r3
 800142a:	d10d      	bne.n	8001448 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d106      	bne.n	8001448 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	42470060 	.word	0x42470060

08001460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e11a      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b8f      	ldr	r3, [pc, #572]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d919      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_ClockConfig+0x34>
 8001488:	4b8a      	ldr	r3, [pc, #552]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a89      	ldr	r2, [pc, #548]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b87      	ldr	r3, [pc, #540]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 0201 	bic.w	r2, r3, #1
 800149c:	4985      	ldr	r1, [pc, #532]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a4:	4b83      	ldr	r3, [pc, #524]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0f9      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c2:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	497a      	ldr	r1, [pc, #488]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 808e 	beq.w	80015fe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ea:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d121      	bne.n	800153a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0d7      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001502:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d115      	bne.n	800153a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0cb      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151a:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0bf      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800152a:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0b7      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153a:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f023 0203 	bic.w	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	495c      	ldr	r1, [pc, #368]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff f954 	bl	80007f8 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d112      	bne.n	8001580 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff f94c 	bl	80007f8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e09b      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001572:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d1ee      	bne.n	800155c <HAL_RCC_ClockConfig+0xfc>
 800157e:	e03e      	b.n	80015fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d112      	bne.n	80015ae <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158a:	f7ff f935 	bl	80007f8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e084      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a0:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d1ee      	bne.n	800158a <HAL_RCC_ClockConfig+0x12a>
 80015ac:	e027      	b.n	80015fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d11d      	bne.n	80015f2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b8:	f7ff f91e 	bl	80007f8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e06d      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d1ee      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x158>
 80015da:	e010      	b.n	80015fe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015dc:	f7ff f90c 	bl	80007f8 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e05b      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ee      	bne.n	80015dc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d219      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d105      	bne.n	800161e <HAL_RCC_ClockConfig+0x1be>
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	4923      	ldr	r1, [pc, #140]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_RCC_ClockConfig+0x254>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e034      	b.n	80016aa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4917      	ldr	r1, [pc, #92]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490f      	ldr	r1, [pc, #60]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f823 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_RCC_ClockConfig+0x258>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490b      	ldr	r1, [pc, #44]	; (80016bc <HAL_RCC_ClockConfig+0x25c>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_RCC_ClockConfig+0x260>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x264>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f85e 	bl	8000760 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80016a8:	7afb      	ldrb	r3, [r7, #11]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	08001980 	.word	0x08001980
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b08e      	sub	sp, #56	; 0x38
 80016ce:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_RCC_GetSysClockFreq+0x16c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d00d      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x34>
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	f200 8092 	bhi.w	800180a <HAL_RCC_GetSysClockFreq+0x142>
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x28>
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0x2e>
 80016ee:	e08c      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_RCC_GetSysClockFreq+0x170>)
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016f4:	e097      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <HAL_RCC_GetSysClockFreq+0x174>)
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016fa:	e094      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	0c9b      	lsrs	r3, r3, #18
 8001700:	f003 020f 	and.w	r2, r3, #15
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_GetSysClockFreq+0x178>)
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	0d9b      	lsrs	r3, r3, #22
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d021      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001724:	2200      	movs	r2, #0
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	61fa      	str	r2, [r7, #28]
 800172a:	4b44      	ldr	r3, [pc, #272]	; (800183c <HAL_RCC_GetSysClockFreq+0x174>)
 800172c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001730:	464a      	mov	r2, r9
 8001732:	fb03 f202 	mul.w	r2, r3, r2
 8001736:	2300      	movs	r3, #0
 8001738:	4644      	mov	r4, r8
 800173a:	fb04 f303 	mul.w	r3, r4, r3
 800173e:	4413      	add	r3, r2
 8001740:	4a3e      	ldr	r2, [pc, #248]	; (800183c <HAL_RCC_GetSysClockFreq+0x174>)
 8001742:	4644      	mov	r4, r8
 8001744:	fba4 0102 	umull	r0, r1, r4, r2
 8001748:	440b      	add	r3, r1
 800174a:	4619      	mov	r1, r3
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	617a      	str	r2, [r7, #20]
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	f7fe fd10 	bl	800017c <__aeabi_uldivmod>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4613      	mov	r3, r2
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
 8001764:	e04e      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	2200      	movs	r2, #0
 800176a:	469a      	mov	sl, r3
 800176c:	4693      	mov	fp, r2
 800176e:	4652      	mov	r2, sl
 8001770:	465b      	mov	r3, fp
 8001772:	f04f 0000 	mov.w	r0, #0
 8001776:	f04f 0100 	mov.w	r1, #0
 800177a:	0159      	lsls	r1, r3, #5
 800177c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001780:	0150      	lsls	r0, r2, #5
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	ebb2 080a 	subs.w	r8, r2, sl
 800178a:	eb63 090b 	sbc.w	r9, r3, fp
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800179a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800179e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017a2:	ebb2 0408 	subs.w	r4, r2, r8
 80017a6:	eb63 0509 	sbc.w	r5, r3, r9
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	00eb      	lsls	r3, r5, #3
 80017b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b8:	00e2      	lsls	r2, r4, #3
 80017ba:	4614      	mov	r4, r2
 80017bc:	461d      	mov	r5, r3
 80017be:	eb14 030a 	adds.w	r3, r4, sl
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	eb45 030b 	adc.w	r3, r5, fp
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d6:	4629      	mov	r1, r5
 80017d8:	028b      	lsls	r3, r1, #10
 80017da:	4620      	mov	r0, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	4604      	mov	r4, r0
 80017e0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80017e4:	4601      	mov	r1, r0
 80017e6:	028a      	lsls	r2, r1, #10
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	2200      	movs	r2, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	60fa      	str	r2, [r7, #12]
 80017f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017f8:	f7fe fcc0 	bl	800017c <__aeabi_uldivmod>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4613      	mov	r3, r2
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001808:	e00d      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_RCC_GetSysClockFreq+0x16c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0b5b      	lsrs	r3, r3, #13
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	3301      	adds	r3, #1
 800181a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001828:	4618      	mov	r0, r3
 800182a:	3738      	adds	r7, #56	; 0x38
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	00f42400 	.word	0x00f42400
 800183c:	016e3600 	.word	0x016e3600
 8001840:	08001974 	.word	0x08001974

08001844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d12c      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e016      	b.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6253      	str	r3, [r2, #36]	; 0x24
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001894:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80018a8:	d105      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018b0:	d101      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80018b2:	2301      	movs	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0201 	bic.w	r2, r3, #1
 80018d0:	490b      	ldr	r1, [pc, #44]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000
 8001900:	40023c00 	.word	0x40023c00

08001904 <memset>:
 8001904:	4603      	mov	r3, r0
 8001906:	4402      	add	r2, r0
 8001908:	4293      	cmp	r3, r2
 800190a:	d100      	bne.n	800190e <memset+0xa>
 800190c:	4770      	bx	lr
 800190e:	f803 1b01 	strb.w	r1, [r3], #1
 8001912:	e7f9      	b.n	8001908 <memset+0x4>

08001914 <__libc_init_array>:
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	2600      	movs	r6, #0
 8001918:	4d0c      	ldr	r5, [pc, #48]	; (800194c <__libc_init_array+0x38>)
 800191a:	4c0d      	ldr	r4, [pc, #52]	; (8001950 <__libc_init_array+0x3c>)
 800191c:	1b64      	subs	r4, r4, r5
 800191e:	10a4      	asrs	r4, r4, #2
 8001920:	42a6      	cmp	r6, r4
 8001922:	d109      	bne.n	8001938 <__libc_init_array+0x24>
 8001924:	f000 f81a 	bl	800195c <_init>
 8001928:	2600      	movs	r6, #0
 800192a:	4d0a      	ldr	r5, [pc, #40]	; (8001954 <__libc_init_array+0x40>)
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <__libc_init_array+0x44>)
 800192e:	1b64      	subs	r4, r4, r5
 8001930:	10a4      	asrs	r4, r4, #2
 8001932:	42a6      	cmp	r6, r4
 8001934:	d105      	bne.n	8001942 <__libc_init_array+0x2e>
 8001936:	bd70      	pop	{r4, r5, r6, pc}
 8001938:	f855 3b04 	ldr.w	r3, [r5], #4
 800193c:	4798      	blx	r3
 800193e:	3601      	adds	r6, #1
 8001940:	e7ee      	b.n	8001920 <__libc_init_array+0xc>
 8001942:	f855 3b04 	ldr.w	r3, [r5], #4
 8001946:	4798      	blx	r3
 8001948:	3601      	adds	r6, #1
 800194a:	e7f2      	b.n	8001932 <__libc_init_array+0x1e>
 800194c:	08001998 	.word	0x08001998
 8001950:	08001998 	.word	0x08001998
 8001954:	08001998 	.word	0x08001998
 8001958:	0800199c 	.word	0x0800199c

0800195c <_init>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr

08001968 <_fini>:
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196a:	bf00      	nop
 800196c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196e:	bc08      	pop	{r3}
 8001970:	469e      	mov	lr, r3
 8001972:	4770      	bx	lr
